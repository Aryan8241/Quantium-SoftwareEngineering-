# app.py

import pandas as pd
import plotly.express as px
from dash import Dash, dcc, html

# --- 1. Load and Prepare the Data ---
try:
    # Load the formatted data generated by process_data.py
    df = pd.read_csv('formatted_sales_data.csv')
    
    # Convert 'Date' column to datetime objects for proper sorting and plotting
    df['Date'] = pd.to_datetime(df['Date'])
    
    # Sort the dataframe by date, which is crucial for a time-series plot
    df.sort_values('Date', inplace=True)
    
    # Calculate a 30-day rolling average for sales to smooth out daily fluctuations
    df['Sales_30_Day_Avg'] = df['Sales'].rolling(window=30).mean()

except FileNotFoundError:
    print("Error: 'formatted_sales_data.csv' not found.")
    print("Please run 'process_data.py' first to generate the data file.")
    # Create an empty DataFrame to prevent the app from crashing
    df = pd.DataFrame(columns=['Date', 'Sales', 'Region', 'Sales_30_Day_Avg'])


# --- 2. Create the Plotly Figure ---
# The date of the price increase
price_increase_date = pd.to_datetime('2021-01-15')

# Create a line chart using Plotly Express
fig = px.line(
    df,
    x='Date',
    y='Sales_30_Day_Avg', # Plot the smoothed, rolling average
    title='Pink Morsel Sales Analysis (30-Day Rolling Average)'
)

# Add a vertical line to mark the price increase
fig.add_vline(
    x=price_increase_date,
    line_width=2,
    line_dash="dash",
    line_color="red",
    annotation_text="Price Increase",
    annotation_position="top right"
)

# Update layout for a professional look and clear axis labels
fig.update_layout(
    xaxis_title='Date',
    yaxis_title='Sales (30-Day Average)',
    font=dict(family="Arial, sans-serif", size=12, color="RebeccaPurple"),
    plot_bgcolor='rgba(240, 240, 240, 0.95)' # Light grey plot background
)


# --- 3. Initialize the Dash App ---
app = Dash(__name__)
server = app.server # Expose server for deployment platforms

# --- 4. Define the App Layout ---
app.layout = html.Div(children=[
    # Header
    html.H1(
        children='Soul Foods: Pink Morsel Sales Visualiser',
        style={'textAlign': 'center', 'color': '#503D36', 'font-family': 'Arial'}
    ),

    # Sub-header / description
    html.Div(
        children='Visualising the impact of the January 15, 2021 price increase on sales.',
        style={'textAlign': 'center', 'color': '#503D36', 'font-family': 'Arial'}
    ),

    # Graph component to display our figure
    dcc.Graph(
        id='sales-line-chart',
        figure=fig
    )
])

# --- 5. Run the App ---
if __name__ == '__main__':
    # Setting debug=True allows you to see errors and automatically reloads the app
    # when you make changes to the code.
    app.run_server(debug=True)
